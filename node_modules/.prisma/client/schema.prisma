generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(100)
  email         String   @unique @db.VarChar(120)
  password_hash String   @db.VarChar(255)
  role          Role     @default(student)
  avatar_url    String?  @db.VarChar(255)
  created_at    DateTime @default(now()) @db.Timestamp(0)

  courses_taught Course[]       @relation("MentorCourses")
  enrollments    Enrollment[]
  forum_posts    ForumPost[]
  forum_comments ForumComment[]
  forum_likes    ForumLike[]
  submissions    Submission[]
  leaderboard    Leaderboard?
  notifications  Notification[]
  projects       Project[]
  testimonials   Testimonial[]
  user_badges    UserBadge[]

  @@map("users")
}

enum Role {
  student
  mentor
  admin
}

model Course {
  id           Int         @id @default(autoincrement())
  title        String      @unique @db.VarChar(150)
  description  String?     @db.Text
  level        CourseLevel @default(Beginner)
  mentor_id    Int?
  is_published Boolean     @default(false) @map("is_published")
  created_at   DateTime    @default(now()) @db.Timestamp(0)

  mentor      User?        @relation("MentorCourses", fields: [mentor_id], references: [id], onDelete: SetNull)
  materials   Material[]
  enrollments Enrollment[]
  forum_posts ForumPost[]
  challenges  Challenge[]
  schedules   Schedule[]

  @@index([mentor_id])
  @@map("courses")
}

enum CourseLevel {
  Beginner
  Intermediate
  Advanced
}

model Material {
  id          Int          @id @default(autoincrement())
  course_id   Int
  title       String       @db.VarChar(150)
  content     String?      @db.MediumText
  type        MaterialType @default(text)
  order_index Int          @default(0) @map("order_index")
  created_at  DateTime     @default(now()) @db.Timestamp(0)

  course   Course     @relation(fields: [course_id], references: [id], onDelete: Cascade)
  progress Progress[]

  @@index([course_id])
  @@map("materials")
}

enum MaterialType {
  text
  video
  pdf
  quiz
  code
}

model Enrollment {
  id               Int      @id @default(autoincrement())
  student_id       Int
  course_id        Int
  progress_percent Int      @default(0) @map("progress_percent")
  created_at       DateTime @default(now()) @db.Timestamp(0)

  student  User       @relation(fields: [student_id], references: [id], onDelete: Cascade)
  course   Course     @relation(fields: [course_id], references: [id], onDelete: Cascade)
  progress Progress[]

  @@unique([student_id, course_id], name: "uniq_enroll")
  @@index([student_id])
  @@index([course_id])
  @@map("enrollments")
}

model Progress {
  id            Int            @id @default(autoincrement())
  enrollment_id Int
  material_id   Int
  status        ProgressStatus @default(belum)
  last_updated  DateTime       @default(now()) @updatedAt @db.Timestamp(0)

  enrollment Enrollment @relation(fields: [enrollment_id], references: [id], onDelete: Cascade)
  material   Material   @relation(fields: [material_id], references: [id], onDelete: Cascade)

  @@unique([enrollment_id, material_id], name: "uniq_prog")
  @@index([enrollment_id])
  @@index([material_id])
  @@map("progress")
}

enum ProgressStatus {
  belum
  sedang
  selesai
}

model ForumPost {
  id         Int      @id @default(autoincrement())
  course_id  Int
  user_id    Int
  title      String?  @unique @db.VarChar(180)
  content    String   @db.MediumText
  created_at DateTime @default(now()) @db.Timestamp(0)

  course   Course         @relation(fields: [course_id], references: [id], onDelete: Cascade)
  user     User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  comments ForumComment[]
  likes    ForumLike[]

  @@index([course_id])
  @@index([user_id])
  @@index([created_at])
  @@map("forum_posts")
}

model ForumComment {
  id         Int      @id @default(autoincrement())
  post_id    Int
  user_id    Int
  content    String   @db.Text
  created_at DateTime @default(now()) @db.Timestamp(0)

  post ForumPost @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([post_id])
  @@index([user_id])
  @@index([created_at])
  @@map("forum_comments")
}

model ForumLike {
  id         Int      @id @default(autoincrement())
  post_id    Int
  user_id    Int
  created_at DateTime @default(now()) @db.Timestamp(0)

  post ForumPost @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([post_id, user_id], name: "uniq_like")
  @@index([post_id])
  @@index([user_id])
  @@map("forum_likes")
}

model Challenge {
  id          Int       @id @default(autoincrement())
  course_id   Int?
  title       String    @unique @db.VarChar(150)
  description String?   @db.Text
  points      Int       @default(10)
  start_at    DateTime? @db.DateTime(0)
  end_at      DateTime? @db.DateTime(0)
  is_active   Boolean   @default(true) @map("is_active")

  course      Course?      @relation(fields: [course_id], references: [id], onDelete: SetNull)
  submissions Submission[]

  @@index([course_id])
  @@map("challenges")
}

model Submission {
  id           Int      @id @default(autoincrement())
  challenge_id Int
  student_id   Int
  repo_url     String?  @db.VarChar(255)
  demo_url     String?  @db.VarChar(255)
  note         String?  @db.Text
  score        Int?
  feedback     String?  @db.Text
  created_at   DateTime @default(now()) @db.Timestamp(0)

  challenge Challenge @relation(fields: [challenge_id], references: [id], onDelete: Cascade)
  student   User      @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@unique([challenge_id, student_id], name: "uniq_submit")
  @@index([challenge_id])
  @@index([student_id])
  @@map("submissions")
}

model Leaderboard {
  id           Int      @id @default(autoincrement())
  student_id   Int      @unique
  total_points Int      @default(0) @map("total_points")
  updated_at   DateTime @default(now()) @updatedAt @db.Timestamp(0)

  student User @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@map("leaderboard")
}

model Schedule {
  id         Int       @id @default(autoincrement())
  course_id  Int
  title      String?   @unique @db.VarChar(150)
  start_at   DateTime? @db.DateTime(0)
  end_at     DateTime? @db.DateTime(0)
  meet_link  String?   @db.VarChar(255)
  created_at DateTime  @default(now()) @db.Timestamp(0)

  course Course @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@index([course_id])
  @@index([start_at])
  @@map("schedules")
}

model Notification {
  id         Int      @id @default(autoincrement())
  user_id    Int
  type       String?  @db.VarChar(50)
  message    String?  @db.VarChar(255)
  is_read    Boolean  @default(false) @map("is_read")
  created_at DateTime @default(now()) @db.Timestamp(0)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([created_at])
  @@map("notifications")
}

model Project {
  id             Int      @id @default(autoincrement())
  student_id     Int
  title          String   @unique @db.VarChar(150)
  screenshot_url String?  @db.VarChar(255)
  demo_url       String?  @db.VarChar(255)
  description    String?  @db.Text
  is_published   Boolean  @default(false) @map("is_published")
  created_at     DateTime @default(now()) @db.Timestamp(0)

  student User @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@index([student_id])
  @@index([created_at])
  @@map("projects")
}

model Testimonial {
  id            Int      @id @default(autoincrement())
  student_id    Int?
  name_override String?  @db.VarChar(100)
  photo_url     String?  @db.VarChar(255)
  quote         String   @unique @db.VarChar(255)
  rating        Int?     @db.TinyInt
  is_approved   Boolean  @default(false) @map("is_approved")
  created_at    DateTime @default(now()) @db.Timestamp(0)

  student User? @relation(fields: [student_id], references: [id], onDelete: SetNull)

  @@index([student_id])
  @@index([is_approved])
  @@map("testimonials")
}

model Badge {
  id          Int     @id @default(autoincrement())
  code        String  @unique @db.VarChar(60)
  name        String  @db.VarChar(120)
  description String? @db.VarChar(255)
  icon_url    String? @db.VarChar(255)

  user_badges UserBadge[]

  @@map("badges")
}

model UserBadge {
  id         Int      @id @default(autoincrement())
  user_id    Int
  badge_id   Int
  awarded_at DateTime @default(now()) @db.Timestamp(0)

  user  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  badge Badge @relation(fields: [badge_id], references: [id], onDelete: Cascade)

  @@unique([user_id, badge_id], name: "uniq_user_badge")
  @@index([user_id])
  @@index([badge_id])
  @@map("user_badges")
}
